package de.objectcode.perftests.binarytrees;

import de.objectcode.perftests.utils.ShowLogActivity;
import de.objectcode.perftests.utils.StopWatch;

/**
 * based on code from http://benchmarksgame.alioth.debian.org/u32/program.php?test=binarytrees&lang=java&id=1
 * @param n
 */
public class BinaryTreesActivity extends ShowLogActivity {

	@Override
	public void perform() {
		log("a deep binary tree structure and modify the tree in a ");
		StopWatch w = new StopWatch();
		log(w.stop());
	}


	public void test(int n) {
		int minDepth = 4;
		int maxDepth = Math.max(minDepth + 2, n);
		int stretchDepth = maxDepth + 1;
		
		TreeNode check = bottomUpTree(0,stretchDepth).itemCheck();
		
		var longLivedTree = bottomUpTree(0,maxDepth);
		for (var depth=minDepth; depth<=maxDepth; depth+=2){
			var iterations = 1 << (maxDepth - depth + minDepth);
			
			check = 0;
			for (var i=1; i<=iterations; i++){
				check += bottomUpTree(i,depth).itemCheck();
				check += bottomUpTree(-i,depth).itemCheck();
			}
			print(iterations*2 + "\t trees of depth " + depth + "\t check: " + check);
		}
		
		print("long lived tree of depth " + maxDepth + "\t check: " 
				+ longLivedTree.itemCheck());
	}
 
   
   private static class TreeNode
   {
      private int item;
      private TreeNode left, right;
      
      public TreeNode(TreeNode left, TreeNode right, int item) {
    	  this.item = item;
    	  this.left = left;
    	  this.right = right;
      }
      
      public int itemCheck() {
    	   if (this.left==null) return this.item;
    	   else return this.item + this.left.itemCheck() - this.right.itemCheck();
    	}

    	public TreeNode bottomUpTree(int item, int depth){
    	   if (depth>0){
    	      return new TreeNode(
    	          bottomUpTree(2*item-1, depth-1)
    	         ,bottomUpTree(2*item, depth-1)
    	         ,item
    	      );
    	   }
    	   else {
    	      return new TreeNode(null,null,item);
    	   }
    	}
   }

}
