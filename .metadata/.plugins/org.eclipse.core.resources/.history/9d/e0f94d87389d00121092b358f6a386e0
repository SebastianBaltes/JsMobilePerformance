module('perftestsjs.tests').houghcircle = (function() {

	function HoughCircleDetection() {
	
		var imageValues;
		var houghValues;
		var sobelCoordsX;
		var sobelCoordsY;
		var sobelValues;
		var soebelEdges;
		var width;
		var height;
	
		public void markCircle(Bitmap image, int radius) {
			width = image.getWidth();
			height = image.getHeight();
			int[] rgb = new int[width * height];
			image.getPixels(rgb, 0, width, 0, 0, width, height);
			setImage2DGrayArray(rgb);
			fillSobelField();
			List<Point> circles = findCircleWithRadius(radius);
			
			Canvas canvas = new Canvas(image);
			Paint paint = new Paint();
			paint.setColor(Color.RED);
			paint.setStyle(Paint.Style.STROKE); 
			paint.setStrokeWidth(5);
			for (Point point : circles) {
				canvas.drawCircle(point.x, point.y, radius, paint);
			}
		}
	
		private void setImage2DGrayArray(int[] arr) {
			imageValues = new int[width][height];
			for (int y = 0; y < height; y++) {
				for (int x = 0; x < width; x++) {
					int pixel = arr[x + y * width];
					int R = (pixel >> 16) & 0xFF;
					int G = (pixel >> 8) & 0xFF;
					int B = pixel & 0xFF;
					int gray = (R + G + B) / 3;
					imageValues[x][y] = gray;
				}
			}
		}
	
		private void fillSobelField() {
			int min = 1;
			int maxW = width - min;
			int maxH = height - min;
			int maxSoebelSize = width * height;
			sobelCoordsX = new int[maxSoebelSize];
			sobelCoordsY = new int[maxSoebelSize];
			sobelValues = new double[maxSoebelSize];
			soebelEdges = 0;
			for (int y = min; y < maxH; y++) {
				for (int x = min; x < maxW; x++) {
					double soebel = directionLessSobelEdgeDetectionValue(x, y);
					if (soebel != 0) {
						sobelCoordsX[soebelEdges] = x;
						sobelCoordsY[soebelEdges] = y;
						sobelValues[soebelEdges] = soebel;
						soebelEdges++;
					}
				}
			}
		}
	
		private List<Point> findCircleWithRadius(int radius) {
			// define circle shape
			int numCirclePoints = 0;
			int numPts = Math.round(8 * radius);
			int[][] circleBorder = new int[2][numPts];
			for (int i = 0; i < numPts; i++) {
				double theta = 6.283185307179586 * i / numPts;
				int xx = (int) Math.round(radius * Math.cos(theta));
				int yy = (int) Math.round(radius * Math.sin(theta));
				if (numCirclePoints == 0
						| (xx != circleBorder[0][numCirclePoints] & yy != circleBorder[1][numCirclePoints])) {
					circleBorder[0][numCirclePoints] = xx;
					circleBorder[1][numCirclePoints] = yy;
					numCirclePoints++;
				}
			}
	
			// do huge transformation
			houghValues = new double[width][height];
			for (int i = 0; i < soebelEdges; i++) {
				int x = sobelCoordsX[i];
				int y = sobelCoordsY[i];
				double sobel = sobelValues[i];
				for (int j = 0; j < numCirclePoints; j++) {
					int xCoord = x + circleBorder[0][j];
					int yCoord = y + circleBorder[1][j];
					if (xCoord >= 0 & xCoord < width & yCoord >= 0
							& yCoord < height) {
						houghValues[xCoord][yCoord] += sobel;
					}
				}
			}
	
			// get global huge maximum
			double treshold = 0;
			for (int y = 0; y < height; y++) {
				for (int x = 0; x < width; x++) {
					treshold = (float)Math.max(treshold, houghValues[x][y]);
				}
			}
			
			// get circle centers
			List<Point> circles = new ArrayList<Point>();
			for (int y = 0; y < height; y++) {
				for (int x = 0; x < width; x++) {
					if (houghValues[x][y] >= treshold) {
						circles.add(new Point(x, y));
					}
				}
			}
			return circles;
		}
	
		private double directionLessSobelEdgeDetectionValue(int xPos, int yPos) {
			double sobelSum = 0.0;
			int[][] d = new int[3][3];
			for (int y = 0; y < 3; y++) {
				for (int x = 0; x < 3; x++) {
					d[x][y] = (imageValues[xPos + x - 1][yPos + y - 1]);
				}
			}
			double sobelH = ((double) d[0][2] + (double) (2 * d[1][2]) + d[2][2]
					- d[0][0] - (2 * d[1][0]) - d[2][0]);
			double sobelV = ((double) d[2][0] + (double) (2 * d[2][1]) + d[2][2]
					- d[0][0] - (2 * d[0][1]) - d[0][2]);
			sobelSum = (Math.abs(sobelH) + Math.abs(sobelV)) / 2;
			return sobelSum;
		}
	
	}

	function startFN() {
		var img = new Image();
		img.src = 'images/balls.jpg'; 
		img.onload = function(){
			var canvas = $('#HoughCirclePage #canvas').get()[0];
			var context = canvas.getContext('2d');
		    context.drawImage(img, 0, 0);
	        var w = new StopWatch();
			var hough = new HoughCircleDetection();
	        hough.markCircle(context,39);
	        log(w.stop());
		};		
	}

	function stopFN() {
	}

	return {
		start : startFN,
		stop : stopFN,
		name : "HoughCircle"
	}

})();